{"version":3,"sources":["helpers/constants.ts","components/Percentage.tsx","components/LoadingBar.tsx","components/PostModal.tsx","components/PostStatsList.tsx","components/PostStats.tsx","components/ProfileModal.tsx","components/ProfileList.tsx","components/FormModal.tsx","components/LoadingSpinner.tsx","components/Home.tsx","index.tsx"],"names":["apiBackendUrl","process","Percentage","nextProps","undefined","value","isNaN","react","this","props","Label","className","index_esm","size","toFixed","React","LoadingBar","highchartsSeriesLabel","Highcharts","PostModal","state","isLoading","hasData","isOpen","chartOptionsAndData","error","errorMessage","loadChart","setState","_this2","fetch","concat","post","path","then","response","ok","json","bodyUsed","err","message","statusText","data","chart","type","zoomType","panning","panKey","resetZoomButton","position","align","verticalAlign","x","y","yAxis","labels","style","color","getOptions","colors","title","text","opposite","xAxis","showFirstLabel","series","name","likesArr","commentsArr","plotOptions","spline","marker","enabled","credits","exporting","subtitle","length","_this3","onClick","e","toggle","preventDefault","children","Modal","fade","keyboard","ModalHeader","href","target","ModalBody","LoadingBar_LoadingBar","Alert","highcharts_react_min_default","a","highcharts","options","callback","window","innerWidth","i","update","visible","ModalFooter","Button","PostsStatsList","postList","posts","map","key","PostModal_PostModal","published","likeCount","toLocaleString","Percentage_Percentage","likePercentage","commentCount","commentPercentage","PostsStats","list1","list2","list3","activeTab","tab","profile","username","topInteraction","topLikes","topComments","loadData","Nav","tabs","NavItem","NavLink","TabContent","TabPane","tabId","Row","Col","sm","PostStatsList_PostsStatsList","ProfileModal","followArr","followedArr","mediasArr","fullName","PostStats_PostsStats","ProfileList","nextState","JSON","stringify","_this","progression","postsScrapped","mediaCount","barType","scrapping","ListGroupItem","isPrivate","notFound","outline","disabled","isFixed","removeProfile","ProfileModal_ProfileModal","xs","followedByCount","followedByPercentage","mediaPercentage","Progress","striped","animated","FormModal","evt","split","join","alert","saveProfile","Form","onSubmit","InputGroup","InputGroupAddon","addonType","Input","placeholder","onChange","updateInputValue","LoadingSpinner","Home","profiles","loading","requestOptions","method","headers","Accept","Content-Type","body","listProfiles","confirm","Date","getTime","catch","openWebSocket","protocol","address","substring","indexOf","toLowerCase","wsSocket","WebSocket","onopen","console","log","onmessage","event","jsonMessage","parse","onclose","setTimeout","setInterval","list","ProfileList_ProfileList","_id","LoadingSpinner_LoadingSpinner","ListGroup","FormModal_FormModal","ReactDOM","Home_Home","document","getElementById"],"mappings":"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","file":"static/js/main.171b13fe.chunk.js","sourcesContent":["export const apiBackendUrl = process.env.REACT_APP_BACKEND_URL;","import * as React from 'react';\r\nimport { Label } from 'reactstrap';\r\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa';\r\nimport '../css/Percentage.scss';\r\n\r\ninterface IProps {\r\n  value: number\r\n}\r\n\r\nexport default class Percentage extends React.Component<IProps> {\r\n\r\n  shouldComponentUpdate(nextProps: any) {\r\n    return nextProps.value !== undefined && !isNaN(nextProps.value);\r\n  }\r\n\r\n  render() {\r\n\r\n    return <span>\r\n\r\n      {this.props.value >= 0.1 &&\r\n        <Label className=\"percUp\"><FaArrowUp size=\"0.8em\" />{this.props.value.toFixed(1)}%</Label>}\r\n\r\n      {this.props.value <= -0.1 &&\r\n        <Label className=\"percDown\"><FaArrowDown size=\"0.8em\" />{this.props.value.toFixed(1)}%</Label>}\r\n\r\n    </span>\r\n  }\r\n}","\r\n\r\nimport * as React from 'react';\r\nimport '../css/LoadingBar.scss';\r\n\r\n\r\nexport default class LoadingBar extends React.Component<{}> {\r\n\r\n  render() {\r\n\r\n    return ( <div>\r\n            <div className=\"loaderBar\"></div>\r\n    </div> );\r\n    \r\n  }\r\n}","import * as React from 'react';\r\nimport { Alert, Button, Modal, ModalHeader, ModalBody, ModalFooter, Label } from 'reactstrap';\r\nimport { FaExternalLinkAlt } from 'react-icons/fa';\r\nimport Highcharts from 'highcharts';\r\nimport highchartsSeriesLabel from \"highcharts/modules/series-label\";\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { apiBackendUrl } from '../helpers/constants';\r\nimport { IPost } from '../interfaces/IPost';\r\nimport LoadingBar from './LoadingBar';\r\n\r\n\r\nhighchartsSeriesLabel(Highcharts);\r\n\r\ninterface IProps {\r\n  post: IPost\r\n}\r\n\r\nexport default class PostModal extends React.Component<IProps> {\r\n\r\n  public state = {\r\n    isLoading: true,\r\n    hasData: false,\r\n    isOpen: false,\r\n    chartOptionsAndData: {},\r\n    error: false,\r\n    errorMessage: \"\"\r\n  }\r\n\r\n  private toggle() {\r\n    if (!this.state.isOpen) {\r\n      this.loadChart();\r\n    }\r\n\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  }\r\n\r\n  private loadChart() {\r\n    fetch(`${apiBackendUrl}post/getChart/${this.props.post.path}`).then(response => {\r\n\r\n      if (!response.ok) {\r\n        if (response.bodyUsed) {\r\n          response.json().then(err => {\r\n            this.setState({ error: true, errorMessage: err.message });\r\n          });\r\n        } else {\r\n          this.setState({ error: true, errorMessage: response.statusText });\r\n        }\r\n        return null;\r\n      }\r\n\r\n      return response.json();\r\n\r\n    }).then(data => {\r\n\r\n      if (data === null) {\r\n        this.setState({ isLoading: false });\r\n        return;\r\n      }\r\n\r\n      let chartOptionsAndData: Highcharts.Options = {\r\n        chart: {\r\n          type: 'spline',\r\n          zoomType: 'x',\r\n          panning: true,\r\n          panKey: 'shift',\r\n          resetZoomButton: {\r\n            position: {\r\n              align: 'left',\r\n              verticalAlign: 'top',\r\n              x: 0,\r\n              y: -10\r\n            }\r\n          }\r\n        },\r\n        yAxis: [{\r\n          labels: {\r\n            style: {\r\n              color: Highcharts.getOptions().colors[7]\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Likes',\r\n            style: {\r\n              color: Highcharts.getOptions().colors[7]\r\n            }\r\n          }\r\n        }, {\r\n          labels: {\r\n            style: {\r\n              color: Highcharts.getOptions().colors[9]\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Comments',\r\n            style: {\r\n              color: Highcharts.getOptions().colors[9]\r\n            }\r\n          },\r\n          opposite: true\r\n        }],\r\n        xAxis: {\r\n          type: 'datetime',\r\n          showFirstLabel: true\r\n        },\r\n        series: [{\r\n          name: 'Likes',\r\n          type: 'spline',\r\n          data: data.likesArr,\r\n          color: Highcharts.getOptions().colors[1]\r\n        }, {\r\n          name: 'Comments',\r\n          type: 'spline',\r\n          data: data.commentsArr,\r\n          yAxis: 1,\r\n          color: Highcharts.getOptions().colors[9]\r\n        }],\r\n        plotOptions: { spline: { marker: { enabled: false } } },\r\n        credits: { enabled: false },\r\n        exporting: { enabled: false },\r\n        title: { text: null },\r\n        subtitle: { text: null }\r\n      }\r\n\r\n      this.setState({\r\n        isLoading: false,\r\n        hasData: data.likesArr.length > 0 ||\r\n                 data.commentsArr.length > 0,\r\n        chartOptionsAndData\r\n      });\r\n\r\n\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return <span onClick={(e) => { this.toggle(); e.preventDefault(); }}>\r\n\r\n      {this.props.children}\r\n\r\n      <Modal size=\"lg\" toggle={() => this.toggle()} isOpen={this.state.isOpen} fade={true} keyboard={true}>\r\n        <ModalHeader toggle={() => this.toggle()}>\r\n          <a href={\"https://instagram.com/p/\" + this.props.post.path} target=\"_new\">{this.props.post.path} <FaExternalLinkAlt size=\"0.8em\" /></a>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n\r\n          {this.state.isLoading && !this.state.error && <LoadingBar /> }\r\n\r\n          {!this.state.isLoading && !this.state.hasData && <Label>No data available</Label>}\r\n\r\n          {this.state.error && <Alert color=\"danger\">{this.state.errorMessage}</Alert>}\r\n\r\n          {!this.state.isLoading && !this.state.error && this.state.hasData &&\r\n            <HighchartsReact\r\n              highcharts={Highcharts}\r\n              options={this.state.chartOptionsAndData}\r\n              callback={chart => {\r\n                if (!this.state.isLoading && this.state.hasData && window.innerWidth < 800){\r\n                  for (var i = 0; i < chart.yAxis.length; i++) {\r\n                    chart.yAxis[i].update({\r\n                          visible: false\r\n                    });\r\n                  }\r\n                }\r\n              }}\r\n            />\r\n          }\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color='default' onClick={() => this.toggle()}>Close</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n\r\n    </span>;\r\n  }\r\n}","import * as React from 'react';\r\nimport Percentage from './Percentage';\r\nimport { IPost } from '../interfaces/IPost';\r\nimport PostModal from './PostModal';\r\nimport '../css/PostStatsList.scss';\r\n\r\ninterface IProps {\r\n  posts: IPost[]\r\n}\r\nexport default class PostsStatsList extends React.Component<IProps> {\r\n\r\n  render() {\r\n\r\n    const postList = this.props.posts.map(post => {\r\n      return <tr key={post.path} >\r\n        <td>\r\n          <PostModal post={post}>\r\n            <a href={\"#\" + post.path}>{post.path}</a>\r\n          </PostModal>\r\n          \r\n          <br />\r\n          <small>{post.published === 0 ? \"today\" :\r\n            post.published + (post.published > 1 ? \" days \" : \" day \") + \" ago\"}</small>\r\n        </td>\r\n        <td>\r\n          Likes: {post.likeCount.toLocaleString('pt-BR')}&nbsp;\r\n          <Percentage value={post.likePercentage} />\r\n          <br />\r\n          Comments: {post.commentCount.toLocaleString('pt-BR')}&nbsp;\r\n          <Percentage value={post.commentPercentage} />\r\n        </td>\r\n\r\n      </tr>\r\n    });\r\n\r\n    return <div>\r\n\r\n      <table className=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <td className=\"postPathCol\">Post</td>\r\n            <td>Stats</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {postList}\r\n        </tbody>\r\n      </table>\r\n\r\n    </div>;\r\n\r\n  }\r\n}","import * as React from 'react';\r\nimport { TabContent, TabPane, Row, Col, Nav, NavItem, NavLink, Label, Alert } from 'reactstrap';\r\nimport { apiBackendUrl } from '../helpers/constants';\r\nimport PostsStatsList from './PostStatsList';\r\nimport { IProfile } from '../interfaces/IProfile';\r\nimport { IPost } from '../interfaces/IPost';\r\nimport '../css/PostStats.scss';\r\nimport LoadingBar from './LoadingBar';\r\n\r\ninterface IProps {\r\n  profile: IProfile\r\n}\r\n\r\nexport default class PostsStats extends React.Component<IProps> {\r\n\r\n  public state = {\r\n    isLoading: true,\r\n    hasData: false,\r\n    list1: [] as IPost[],\r\n    list2: [] as IPost[],\r\n    list3: [] as IPost[],\r\n    activeTab: '1',\r\n    error: false,\r\n    errorMessage: \"\"\r\n  }\r\n\r\n  private toggle(tab: string) {\r\n    this.setState({ activeTab: tab });\r\n  }\r\n\r\n  private loadData() {\r\n    fetch(`${apiBackendUrl}post/getStats/${this.props.profile.username}?limit=30`).then(response => {\r\n\r\n      if (!response.ok) {\r\n        if (response.bodyUsed) {\r\n          response.json().then(err => {\r\n            this.setState({ error: true, errorMessage: err.message });\r\n          });\r\n        } else {\r\n          this.setState({ error: true, errorMessage: response.statusText });\r\n        }\r\n        return null;\r\n      }\r\n\r\n      return response.json();\r\n\r\n    }).then(data => {\r\n\r\n      if (data === null) {\r\n        this.setState({ isLoading: false });\r\n        return;\r\n      }\r\n\r\n      this.setState({\r\n        isLoading: false,\r\n        hasData: data.topInteraction.length > 0 || data.topLikes.length > 0 || data.topComments.length > 0,\r\n        list1: data.topInteraction,\r\n        list2: data.topLikes,\r\n        list3: data.topComments,\r\n        activeTab: '1'\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  render() {\r\n\r\n    return <div>\r\n\r\n      {this.state.isLoading && !this.state.error && <LoadingBar /> }\r\n\r\n      {this.state.error && <Alert color=\"danger\">{this.state.errorMessage}</Alert>}\r\n\r\n      {!this.state.isLoading && !this.state.error && this.state.hasData &&\r\n        <div>\r\n          <Label>Top 30 interactions</Label>\r\n\r\n          <Nav tabs>\r\n            <NavItem>\r\n              <NavLink\r\n                className={this.state.activeTab === '1' ? \"active\" : \"\"}\r\n                onClick={() => { this.toggle('1'); }}>\r\n                Highlights\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={this.state.activeTab === '2' ? \"active\" : \"\"}\r\n                onClick={() => { this.toggle('2'); }} >\r\n                Likes\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={this.state.activeTab === '3' ? \"active\" : \"\"}\r\n                onClick={() => { this.toggle('3'); }} >\r\n                Comments\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <TabContent activeTab={this.state.activeTab}>\r\n            <TabPane tabId=\"1\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <PostsStatsList posts={this.state.list1} />\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <PostsStatsList posts={this.state.list2} />\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId=\"3\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <PostsStatsList posts={this.state.list3} />\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n          </TabContent>\r\n        </div>\r\n      }\r\n\r\n    </div>;\r\n\r\n  }\r\n}","import * as React from 'react';\r\nimport { Alert, Button, Modal, ModalHeader, ModalBody, ModalFooter, Label } from 'reactstrap';\r\nimport { FaExternalLinkAlt } from 'react-icons/fa';\r\nimport Highcharts from 'highcharts';\r\nimport highchartsSeriesLabel from \"highcharts/modules/series-label\";\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { IProfile } from '../interfaces/IProfile';\r\nimport { apiBackendUrl } from '../helpers/constants';\r\nimport PostStats from './PostStats';\r\nimport LoadingBar from './LoadingBar';\r\n\r\nhighchartsSeriesLabel(Highcharts);\r\n\r\ninterface IProps {\r\n  profile: IProfile\r\n}\r\n\r\nexport default class ProfileModal extends React.Component<IProps> {\r\n\r\n  public state = {\r\n    isLoading: true,\r\n    hasData: false,\r\n    isOpen: false,\r\n    chartOptionsAndData: {},\r\n    error: false,\r\n    errorMessage: \"\"\r\n  }\r\n\r\n  private toggle() {\r\n    if (!this.state.isOpen) {\r\n      this.loadChart();\r\n    }\r\n\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  }\r\n\r\n  private loadChart() {\r\n    fetch(`${apiBackendUrl}profile/getChart/${this.props.profile.username}`).then(response => {\r\n\r\n      if (!response.ok) {\r\n        if (response.bodyUsed) {\r\n          response.json().then(err => {\r\n            this.setState({ error: true, errorMessage: err.message });\r\n          });\r\n        } else {\r\n          this.setState({ error: true, errorMessage: response.statusText });\r\n        }\r\n        return null;\r\n      }\r\n\r\n      return response.json();\r\n\r\n    }).then(data => {\r\n\r\n      if (data === null) {\r\n        this.setState({ isLoading: false });\r\n        return;\r\n      }\r\n\r\n      let chartOptionsAndData: Highcharts.Options = {\r\n        chart: {\r\n          type: 'spline',\r\n          zoomType: 'x',\r\n          panning: true,\r\n          panKey: 'shift',\r\n          resetZoomButton: {\r\n            position: {\r\n              align: 'left',\r\n              verticalAlign: 'top',\r\n              x: 0,\r\n              y: -10\r\n            }\r\n          }\r\n        },\r\n        yAxis: [{\r\n          labels: {\r\n            style: {\r\n              color: Highcharts.getOptions().colors[1]\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Following',\r\n            style: {\r\n              color: Highcharts.getOptions().colors[1]\r\n            }\r\n          },\r\n          opposite: true\r\n        }, {\r\n          labels: {\r\n            style: {\r\n              color: Highcharts.getOptions().colors[3]\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Followed',\r\n            style: {\r\n              color: Highcharts.getOptions().colors[3]\r\n            }\r\n          },\r\n          opposite: true\r\n        }, {\r\n          labels: {\r\n            style: {\r\n              color: Highcharts.getOptions().colors[5]\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Posts',\r\n            style: {\r\n              color: Highcharts.getOptions().colors[5]\r\n            }\r\n          },\r\n          opposite: true\r\n        }, {\r\n          labels: {\r\n            style: {\r\n              color: Highcharts.getOptions().colors[7]\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Likes',\r\n            style: {\r\n              color: Highcharts.getOptions().colors[7]\r\n            }\r\n          }\r\n        }, {\r\n          labels: {\r\n            style: {\r\n              color: Highcharts.getOptions().colors[9]\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Comments',\r\n            style: {\r\n              color: Highcharts.getOptions().colors[9]\r\n            }\r\n          },\r\n          opposite: true\r\n        }],\r\n        xAxis: {\r\n          type: 'datetime',\r\n          showFirstLabel: true\r\n        },\r\n        series: [{\r\n          name: 'Following',\r\n          type: 'spline',\r\n          data: data.followArr,\r\n          visible: false,\r\n          color: Highcharts.getOptions().colors[1]\r\n        }, {\r\n          name: 'Followed',\r\n          type: 'spline',\r\n          data: data.followedArr,\r\n          yAxis: 1,\r\n          color: Highcharts.getOptions().colors[3]\r\n        }, {\r\n          name: 'Posts',\r\n          type: 'spline',\r\n          data: data.mediasArr,\r\n          yAxis: 2,\r\n          color: Highcharts.getOptions().colors[5]\r\n        }, {\r\n          name: 'Likes',\r\n          type: 'spline',\r\n          data: data.likesArr,\r\n          yAxis: 3,\r\n          color: Highcharts.getOptions().colors[7]\r\n        }, {\r\n          name: 'Comments',\r\n          type: 'spline',\r\n          data: data.commentsArr,\r\n          yAxis: 4,\r\n          color: Highcharts.getOptions().colors[9]\r\n        }],\r\n        plotOptions: { \r\n          spline: { \r\n            marker: { enabled: false } \r\n          }\r\n        },\r\n        credits: { enabled: false },\r\n        exporting: { enabled: false },\r\n        title: { text: null },\r\n        subtitle: { text: null }\r\n      }\r\n\r\n      this.setState({\r\n        isLoading: false,\r\n        hasData: data.followArr.length > 0 ||\r\n          data.followedArr.length > 0 ||\r\n          data.mediasArr.length > 0 ||\r\n          data.likesArr.length > 0 ||\r\n          data.commentsArr.length > 0,\r\n        chartOptionsAndData\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return <div onClick={(e) => { this.toggle(); e.preventDefault(); }}>\r\n\r\n      {this.props.children}\r\n\r\n      <Modal size=\"lg\" toggle={() => this.toggle()} isOpen={this.state.isOpen} fade={true} keyboard={true}>\r\n        <ModalHeader toggle={() => this.toggle()}>\r\n          <a href={\"https://instagram.com/\" + this.props.profile.username} target=\"_new\">{this.props.profile.fullName} <FaExternalLinkAlt size=\"0.8em\" /></a>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n\r\n          {this.state.isLoading && !this.state.error && <LoadingBar />}\r\n\r\n          {!this.state.isLoading && !this.state.hasData && <Label>No data available</Label>}\r\n\r\n          {this.state.error && <Alert color=\"danger\">{this.state.errorMessage}</Alert>}\r\n\r\n          {!this.state.isLoading && !this.state.error && this.state.hasData &&\r\n            <HighchartsReact\r\n              highcharts={Highcharts}\r\n              options={this.state.chartOptionsAndData}\r\n              callback={chart => {\r\n                if (!this.state.isLoading && this.state.hasData && window.innerWidth < 800){\r\n                  for (var i = 0; i < chart.yAxis.length; i++) {\r\n                    chart.yAxis[i].update({\r\n                          visible: false\r\n                    });\r\n                  }\r\n                }\r\n              }}\r\n            />\r\n          }\r\n\r\n          {!this.state.isLoading && this.state.hasData &&\r\n            <PostStats profile={this.props.profile} />}\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color='default' onClick={() => this.toggle()}>Close</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n\r\n    </div>;\r\n  }\r\n}","import * as React from 'react';\r\nimport { ListGroupItem, Button, Label, Row, Col, Progress } from 'reactstrap';\r\nimport '../css/ProfileList.scss';\r\nimport ProfileModal from './ProfileModal';\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport { IProfile } from '../interfaces/IProfile';\r\nimport Percentage from './Percentage';\r\n\r\ninterface IProps {\r\n  profile: IProfile,\r\n  listProfiles: () => void,\r\n  removeProfile: (username: string) => void\r\n}\r\n\r\nexport default class ProfileList extends React.Component<IProps> {\r\n\r\n  shouldComponentUpdate(nextProps: any, nextState: any) {\r\n    return JSON.stringify(this.props) !== JSON.stringify(nextProps);\r\n  }\r\n\r\n  render() {\r\n\r\n    let profile = this.props.profile;\r\n\r\n    let progression: number = (profile.postsScrapped / profile.mediaCount) * 100;\r\n    if (progression > 100) {\r\n      progression = 100;\r\n    }\r\n\r\n    let barType: string = \"warning\";\r\n    if (progression === 100) {\r\n      barType = \"success\";\r\n    }\r\n    if (profile.scrapping) {\r\n      barType = \"info\"\r\n    }\r\n\r\n    return (<ListGroupItem color={profile.isPrivate || profile.notFound ? 'danger' : ''}>\r\n\r\n      <span className=\"float-right\">\r\n        <Button outline color=\"danger\" size=\"sm\" disabled={this.props.profile.isFixed} onClick={() => this.props.removeProfile(this.props.profile.username)}>\r\n          <FaTrash />\r\n        </Button>\r\n      </span>\r\n\r\n      <ProfileModal profile={profile}>\r\n        <div className=\"profile-name\">\r\n          <a href={\"#\" + profile.username}>{\r\n            profile.fullName ? profile.fullName : \"loading...\"\r\n          }</a>\r\n          <small>@{profile.username}</small>\r\n        </div>\r\n      </ProfileModal>\r\n\r\n      {profile.isPrivate || profile.notFound ? <Label color=\"danger\">(not found or private)</Label> : \"\"}\r\n\r\n      <Row>\r\n        <Col xs=\"6\" sm=\"3\">\r\n          <small>Followed:</small><br />\r\n          {profile.followedByCount.toLocaleString('pt-BR')} <br />\r\n          <Percentage value={profile.followedByPercentage} />\r\n        </Col>\r\n        <Col xs=\"6\" sm=\"3\">\r\n          <small>Posts:</small><br />\r\n          {profile.mediaCount.toLocaleString('pt-BR')}  <br />\r\n          <Percentage value={profile.mediaPercentage} />\r\n        </Col>\r\n        <Col xs=\"6\" sm=\"3\">\r\n          <small>Likes:</small><br />\r\n          {profile.likeCount.toLocaleString('pt-BR')}  <br />\r\n          <Percentage value={profile.likePercentage} />\r\n        </Col>\r\n        <Col xs=\"6\" sm=\"3\">\r\n          <small>Comments:</small><br />\r\n          {profile.commentCount.toLocaleString('pt-BR')}  <br />\r\n          <Percentage value={profile.commentPercentage} />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Progress value={progression} color={barType} striped={profile.scrapping} animated={profile.scrapping} />\r\n\r\n    </ListGroupItem>);\r\n\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { Button, Modal, ModalBody, ModalFooter, Form, InputGroup, InputGroupAddon, Input } from 'reactstrap';\r\nimport { FaPlus, FaUserPlus } from 'react-icons/fa';\r\nimport '../css/FormModal.scss';\r\n\r\ninterface IProps {\r\n  saveProfile: (username: string) => void\r\n}\r\n\r\nexport default class FormModal extends React.Component<IProps> {\r\n\r\n  public state = {\r\n    isOpen: false,\r\n    username: \"\"\r\n  }\r\n\r\n  private updateInputValue (evt: any) {\r\n    this.setState({\r\n      username: evt.target.value\r\n    });\r\n  }\r\n\r\n  private saveProfile (evt: any) {\r\n\r\n    if (this.state.username.split(\" \").join(\"\") === \"\") {\r\n      return alert(\"Please type the username\");\r\n    }\r\n\r\n    this.props.saveProfile(this.state.username); \r\n    this.setState({username: \"\" });\r\n    this.toggle();\r\n    evt.preventDefault();\r\n  }\r\n\r\n  private toggle() {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  }\r\n\r\n  render() {\r\n\r\n    return <span onClick={(e) => { this.toggle(); e.preventDefault(); }}>\r\n\r\n      <a href=\"#addNew\" className=\"float\">\r\n        <FaPlus className=\"my-float\" />\r\n      </a>\r\n\r\n      <Modal size=\"md\" toggle={() => this.toggle()} isOpen={this.state.isOpen} fade={true} keyboard={true}>\r\n        <ModalBody>\r\n\r\n          <Form onSubmit={(e) => { this.saveProfile(e); }}>\r\n            <InputGroup>\r\n              <InputGroupAddon addonType=\"prepend\" className=\"input-group-text\"><FaUserPlus />&nbsp; add new @</InputGroupAddon>\r\n              <Input placeholder=\"instagram username\" value={this.state.username} onChange={evt => this.updateInputValue(evt)} />\r\n            </InputGroup>\r\n          </Form>\r\n\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color='default' onClick={() => this.toggle()}>Close</Button>\r\n          <Button color=\"success\" onClick={(e) => { this.saveProfile(e) }}>Save</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n\r\n    </span>;\r\n  }\r\n}","\r\n\r\nimport * as React from 'react';\r\nimport '../css/LoadingSpinner.scss';\r\n\r\n\r\nexport default class LoadingSpinner extends React.Component<{}> {\r\n\r\n  render() {\r\n\r\n    return ( <div>\r\n        <div className=\"loading\">\r\n            <div className=\"loader\"></div>\r\n        </div> \r\n    </div> );\r\n    \r\n  }\r\n}","import * as React from 'react';\r\nimport { ListGroup } from 'reactstrap';\r\nimport ProfileList from './ProfileList';\r\nimport '../css/Home.scss';\r\nimport { apiBackendUrl } from '../helpers/constants';\r\nimport { IProfile } from '../interfaces/IProfile';\r\nimport FormModal from './FormModal';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\nexport default class Home extends React.Component<{}> {\r\n\r\n  public state = {\r\n    profiles: [] as IProfile[],\r\n    loading: true\r\n  }\r\n\r\n  saveProfile = (username: string) => {\r\n\r\n    this.setState({ loading: true });\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ \"username\": username })\r\n    };\r\n\r\n    fetch(apiBackendUrl + \"profile/save\", requestOptions).then(response => {\r\n      if (!response.ok) {\r\n        response.json().then(function (err) {\r\n          alert(err.message);\r\n        });\r\n        return;\r\n      }\r\n\r\n      this.listProfiles();\r\n    });\r\n  }\r\n\r\n  removeProfile = (username: string) => {\r\n\r\n    if (!window.confirm(\"Confirm this action?\")) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ loading: true });\r\n\r\n    const requestOptions = {\r\n      method: 'DELETE'\r\n    };\r\n\r\n    fetch(apiBackendUrl + \"profile/\" + username, requestOptions).then(response => {\r\n      if (!response.ok) {\r\n        response.json().then(function (err) {\r\n          alert(err.message);\r\n        });\r\n        return;\r\n      }\r\n\r\n      this.listProfiles();\r\n    });\r\n  }\r\n\r\n  listProfiles = () => {\r\n    fetch(`${apiBackendUrl}profile/listAll?_t=${new Date().getTime()}`)\r\n      .then(response => response.json())\r\n      .then(profiles => this.setState({ profiles, loading: false }))\r\n      .catch(e => e);\r\n  }\r\n\r\n  openWebSocket = () => {\r\n    if (\"WebSocket\" in window) {\r\n\r\n      let protocol = window[\"location\"][\"protocol\"];\r\n      let address = apiBackendUrl.substring(apiBackendUrl.indexOf(\":\") + 3);\r\n      address = (((protocol + \"\").toLowerCase().indexOf(\"https\") === 0) ? \"wss://\" : \"ws://\") + address;\r\n\r\n      let wsSocket = new WebSocket(address);\r\n\r\n      wsSocket.onopen = () => {\r\n        console.log(\"Websocket connected!\");\r\n      };\r\n\r\n      wsSocket.onmessage = (event) => {\r\n        try {\r\n\r\n          var jsonMessage = JSON.parse(event.data);\r\n\r\n          if (jsonMessage.message) {\r\n            if (jsonMessage.message === \"new profile\" || jsonMessage.message === \"removed profile\") {\r\n              this.listProfiles();\r\n            }\r\n          }\r\n\r\n          console.log(event.data);\r\n\r\n        } catch (error) {\r\n          //nothing\r\n        }\r\n      };\r\n\r\n      wsSocket.onclose = () => {\r\n        console.log(\"Websocket closed!\");\r\n        // Try to reconnect in 5 second\r\n        setTimeout(this.openWebSocket, 5000);\r\n      };\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(apiBackendUrl);\r\n    this.listProfiles();\r\n    this.openWebSocket();\r\n    setInterval(() => this.listProfiles(), 5000);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: any, nextState: any) {\r\n    return JSON.stringify(this.state.profiles) !== JSON.stringify(nextState.profiles) || this.state.loading !== nextState.loading;\r\n  }\r\n\r\n  render() {\r\n    const list = this.state.profiles.map((profile) => {\r\n      return <ProfileList\r\n        key={profile._id}\r\n        profile={profile}\r\n        listProfiles={this.listProfiles}\r\n        removeProfile={this.removeProfile} />\r\n    })\r\n\r\n    return (\r\n      <div>\r\n\r\n        {this.state.loading && <LoadingSpinner />}\r\n\r\n        {!this.state.loading && <ListGroup>{list}</ListGroup>}\r\n\r\n        {!this.state.loading && <FormModal saveProfile={this.saveProfile} />}\r\n\r\n        {!this.state.loading && <div className=\"text-center\">\r\n          <small>\r\n            Developed by <a href=\"http://ivanvaladares.com\" target=\"_new\">Ivan Valadares</a> <br /> \r\n            Check the <a href=\"/api-docs\" target=\"_new\">API docs</a><br /> \r\n            Get the source code at <a href=\"https://github.com/ivanvaladares/instagram-scrapper\">github.com/ivanvaladares/instagram-scrapper</a>\r\n          </small>\r\n        </div>}\r\n\r\n\r\n      </div>);\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport Home from './components/Home';\r\n\r\nReactDOM.render(<Home />, document.getElementById('root'));"],"sourceRoot":""}